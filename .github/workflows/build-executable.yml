name: Build Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install --force-reinstall paddlepaddle paddleocr

    # Pre-download PaddleOCR models to include in the package
    - name: Pre-download PaddleOCR models
      run: |
        # Create a Python script to download models line by line
        echo "import os" > download_models.py
        echo "from paddleocr import PaddleOCR" >> download_models.py
        echo "" >> download_models.py
        echo "# Create models directory" >> download_models.py
        echo "models_dir = os.path.join(os.getcwd(), 'paddleocr_models')" >> download_models.py
        echo "os.makedirs(models_dir, exist_ok=True)" >> download_models.py
        echo "" >> download_models.py
        echo "# Initialize PaddleOCR to force model download" >> download_models.py
        echo "# The models will be cached in the .paddleocr directory" >> download_models.py
        echo "ocr = PaddleOCR(lang='en', use_gpu=False, show_log=True)" >> download_models.py
        echo "" >> download_models.py
        echo "# List downloaded model files to verify" >> download_models.py
        echo "print('Downloaded models:')" >> download_models.py
        echo "for root, dirs, files in os.walk(os.path.expanduser('~/.paddleocr')):" >> download_models.py
        echo "    for file in files:" >> download_models.py
        echo "        print(os.path.join(root, file))" >> download_models.py
        echo "" >> download_models.py
        echo "# Copy models to our custom directory that will be included in the package" >> download_models.py
        echo "import shutil" >> download_models.py
        echo "paddle_dir = os.path.expanduser('~/.paddleocr')" >> download_models.py
        echo "for root, dirs, files in os.walk(paddle_dir):" >> download_models.py
        echo "    for file in files:" >> download_models.py
        echo "        src_path = os.path.join(root, file)" >> download_models.py
        echo "        rel_path = os.path.relpath(src_path, paddle_dir)" >> download_models.py
        echo "        dst_path = os.path.join(models_dir, rel_path)" >> download_models.py
        echo "        os.makedirs(os.path.dirname(dst_path), exist_ok=True)" >> download_models.py
        echo "        shutil.copy2(src_path, dst_path)" >> download_models.py
        echo "        print(f'Copied {src_path} to {dst_path}')" >> download_models.py
        
        # Run the script to download models
        python download_models.py
        
        # Verify models were downloaded and copied
        echo "Checking models directory:"
        dir paddleocr_models

    # Custom PyInstaller installation with bootloader recompilation
    - name: Install custom PyInstaller
      run: |
        $Env:CL = "/Od"
        $Env:PYINSTALLER_COMPILE_BOOTLOADER = "true"
        python -m pip install --force-reinstall --ignore-installed --no-binary :all: --no-cache pyinstaller@git+https://github.com/pyinstaller/pyinstaller.git@0d562b5
        $Env:CL = ""
        

    - name: Build executable
      run: |
        # Create a default config.json if it doesn't exist
        if (-not (Test-Path -Path "config.json")) {
          echo "{}" > config.json
        }
        
        # Create configs directory and default JSON files if they don't exist
        $configsDir = "configs"
        if (-not (Test-Path -Path $configsDir)) {
          New-Item -Path $configsDir -ItemType Directory
        }
        
        # Create default config files if they don't exist
        if (-not (Test-Path -Path "$configsDir\AP.json")) {
          echo "{}" > "$configsDir\AP.json"
        }
        
        if (-not (Test-Path -Path "$configsDir\ship_configs.json")) {
          echo "{}" > "$configsDir\ship_configs.json"
        }
        
        if (-not (Test-Path -Path "$configsDir\resolution.json")) {
          echo "{}" > "$configsDir\resolution.json"
        }
        
        # Create build info file with just the date
        $buildDate = Get-Date -Format "yyyy-MM-dd"
        echo "Build date: $buildDate" > build_info.txt
        
        # Run PyInstaller with options to reduce false positives
        # Using --onedir instead of --onefile significantly reduces false positives
        pyinstaller --onedir --windowed --icon="screen\edap.ico" `
          --add-data "screen\edap.ico;screen" `
          --add-data "screen\*.png;screen" `
          --add-data "*.py;." `
          --add-data "build_info.txt;." `
          --add-data "config.json;." `
          --add-data "configs\*.json;configs" `
          --add-data "paddleocr_models;paddleocr_models" `
          --collect-data "paddle" `
          --collect-all "paddleocr" `
          --hidden-import=PIL `
          --hidden-import=PIL._imagingtk `
          --hidden-import=PIL._tkinter_finder `
          --name "EDAP-$buildDate" `
          --clean `
          --noupx `
          --noconfirm `
          EDAPGui.py
        
        # Check if build was successful
        if (Test-Path ".\dist\EDAP-$buildDate") {
          echo "Build successful: EDAP-$buildDate"
        } else {
          echo "Build failed or directory not found at expected location"
          exit 1
        }

    - name: Check build with Windows Defender
      continue-on-error: true
      run: |
        # Try to enable Windows Defender if possible
        try {
          Set-MpPreference -DisableRealtimeMonitoring $false -ErrorAction SilentlyContinue
          Set-MpPreference -DisableBehaviorMonitoring $false -ErrorAction SilentlyContinue
        } catch {
          echo "::warning::Cannot configure Windows Defender settings"
        }
        
        # Scan using direct command line tool
        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildPath = Resolve-Path ".\dist\EDAP-$buildDate"
        
        echo "Scanning path: $buildPath"
        
        # Run the scan and capture output
        $scanOutput = & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -File "$buildPath" 2>&1
        
        # Display the scan output
        echo "Scan results:"
        echo $scanOutput
        
        # Try to get threat detections (this may not work in GitHub Actions environment)
        try {
          $threats = Get-MpThreat -ErrorAction SilentlyContinue
          if ($threats) {
            echo "::warning::Windows Defender detected threats:"
            $threats | Format-List
          } else {
            echo "No threats detected by Windows Defender."
          }
        } catch {
          echo "Could not retrieve threat information."
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: EDAP
        path: ./dist/EDAP-*
        retention-days: 90